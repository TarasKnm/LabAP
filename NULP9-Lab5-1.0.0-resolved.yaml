---
openapi: 3.0.0
info:
  title: Swagger goodsstore
  description: |
    This is a sample goodsstore server.  You can find
    out more about Swagger at
    [http://swagger.io](http://swagger.io) or on
    [irc.freenode.net, #swagger](http://swagger.io/irc/).
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/NULP9/Lab5/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://virtserver.swaggerhub.com/NULP9/WebShop/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://goodsstore.swagger.io/v2
tags:
- name: goods
  description: Everything about your goodss
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: store
  description: Access to goodsstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /goods:
    put:
      tags:
      - goods
      summary: Update an existing goods
      operationId: updategoods
      requestBody:
        $ref: '#/components/requestBodies/goods'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: goods not found
        "405":
          description: Validation exception
      security:
      - goodsstore_auth:
        - write:goodss
        - read:goodss
    post:
      tags:
      - goods
      summary: Add a new goods to the store
      operationId: addgoods
      requestBody:
        $ref: '#/components/requestBodies/goods'
      responses:
        "405":
          description: Invalid input
      security:
      - goodsstore_auth:
        - write:goodss
        - read:goodss
  /goods/findByStatus:
    get:
      tags:
      - goods
      summary: Finds goodss by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findgoodssByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goods'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goods'
        "400":
          description: Invalid status value
      security:
      - goodsstore_auth:
        - write:goodss
        - read:goodss
  /goods/{goodsId}:
    get:
      tags:
      - goods
      summary: Find goods by ID
      description: Returns a goods
      operationId: getgoodsById
      parameters:
      - name: goodsId
        in: path
        description: ID of goods to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goods'
            application/xml:
              schema:
                $ref: '#/components/schemas/Goods'
        "400":
          description: Invalid ID supplied
        "404":
          description: goods not found
      security:
      - api_key: []
    post:
      tags:
      - goods
      summary: Updates a goods in the store with form data
      operationId: updategoodsWithForm
      parameters:
      - name: goodsId
        in: path
        description: ID of goods that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Goods'
      responses:
        "405":
          description: Invalid input
      security:
      - goodsstore_auth:
        - write:goods
        - read:goods
    delete:
      tags:
      - goods
      summary: Deletes a goods
      operationId: deletegoods
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: goodsId
        in: path
        description: goods id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: goods not found
      security:
      - goodsstore_auth:
        - write:goodss
        - read:goodss
  /goods/{goodsId}/uploadImage:
    post:
      tags:
      - goods
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: goodsId
        in: path
        description: ID of goods to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
      security:
      - goodsstore_auth:
        - write:goodss
        - read:goodss
  /store/goods:
    get:
      tags:
      - store
      summary: Returns all goods
      description: Returns a map of status codes to quantities
      operationId: getGoods
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a goods
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the goods
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid Order
  /store/store:
    post:
      tags:
      - store
      summary: set store
      operationId: setStore
      requestBody:
        description: set store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Store'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Store'
            application/xml:
              schema:
                $ref: '#/components/schemas/Store'
        "400":
          description: Invalid store
  /store/order/{orderId}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.\ \ Other values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of goods that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          maximum: 10
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.\ \ Negative or non-integer values will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        goodsId:
          type: integer
          format: int64
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Goods:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: hammer
        isAvailable:
          type: boolean
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        status:
          type: string
          description: goods status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: goods
    Store:
      type: object
      properties:
        name:
          type: string
          example: Pet Store
        category:
          type: string
          example: hardware store
        goods:
          maxItems: 8
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Goods'
      description: Show store
  requestBodies:
    goods:
      description: goods object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Goods'
        application/xml:
          schema:
            $ref: '#/components/schemas/Goods'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    goodsstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://goodsstore.swagger.io/oauth/dialog
          scopes:
            write:goodss: modify goodss in your account
            read:goodss: read your goodss
    api_key:
      type: apiKey
      name: api_key
      in: header
